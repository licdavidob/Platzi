------ Bases de datos NoSQL ------

* Documentales: Se empareja una clave con una estructura de datos compleja denominada documento.

* Grafos: Se basan en la teoría de grafos, donde los nodos representan entidades y las aristas las relaciones entre ellas.

* Clave-valor: Son las bases de datos más simples, donde cada clave se asocia con un único valor.

* Columnares: Almacenan los datos en columnas en lugar de filas. Permiten realizar consultas en grandes volúmenes de datos.

* Bases de datos:
    - Documentales: MongoDB, CouchDB, Firebase.
    - Grafos: Neo4j, ArangoDB.
    - Clave-valor: Redis, DynamoDB.
    - Columnares: Cassandra, HBase.

* Escalamiento Horizontal: Las NoSQL están diseñadas para escalar horizontalmente, es decir, añadir más servidores a la base de datos para aumentar su capacidad.

------ MongoDB ------

* Documento: Es una forma de organizar y almacenar información con un conjunto de claves y valores.

{
    "nombre": "Juan",
    "edad": 25,
    "ciudad": "Bogotá",
    "hobbies": ["fútbol", "videojuegos"]
}

* Colección: Es un conjunto de documentos almacenados en MongoDB (similar a una carpeta que contiene archivos).

------ Instalación y Conexión con MongoDB ------

* Atlas: Es un servicio de MongoDB que permite crear, escalar y administrar bases de datos en la nube.
    - https://www.mongodb.com/cloud/atlas

* Docker: Es una plataforma de código abierto que facilita la creación, implementación y ejecución de aplicaciones en contenedores.
    - https://www.docker.com/

* MongoDB Compass: Es una interfaz gráfica para MongoDB que permite explorar y manipular los datos de la base de datos.
    - https://www.mongodb.com/products/compass

* Shell de MongoDB: Es una interfaz de línea de comandos que permite interactuar con la base de datos.
    - mongosh "mongodb://<usuario>:<contraseña>@<servidor>/<base_de_datos>"

------ JSON vs BSON ------

* JSON: Es un formato de texto que se utiliza para intercambiar datos. Es legible por humanos y fácil de entender.
    - Basado en texto.
    - Consume más espacio.
    - Limitado: String, Number, Boolean, Array, Object, Null.

* BSON: Es una representación binaria de JSON que permite almacenar y recuperar datos de forma eficiente en MongoDB.
    - Basado en binario.
    - Consume menos espacio.
    - Mayor rendimiento.
    - Tipos de datos adicionales.
    - Link: "https://www.mongodb.com/resources/languages/bson"

* Mongodb utiliza BSON para almacenar los datos en la base de datos.

------ Flexibilidad en MongoDB ------

* Al usar el comando use("database_name") se crea una base de datos si no existe o se usa una base de datos existente.

* Al insertar un documento (db.collection.insertOne({campo: "value"})) en una colección, se crea la colección si no existe o se inserta el documento en la colección existente.

------ Conceptos Generales ------

* ObjectId: Es un identificador único de 12 bytes que se genera automáticamente al insertar un documento en una colección de MongoDB. Es posible crear un ObjectId manualmente.

* InsertMany: Permite insertar varios documentos en una colección de MongoDB. Si hay una falla en la inserción de un documento, deja de insertar los siguientes.
    - "ordered: false": Permite continuar con la inserción de los documentos restantes aunque haya una falla.

* UpdateOne vs UpdateMany: UpdateOne actualiza el primer documento que cumple con la condición, mientras que UpdateMany actualiza todos los documentos que cumplen con la condición.

* DeleteOne vs DeleteMany: DeleteOne elimina el primer documento que cumple con la condición, mientras que DeleteMany elimina todos los documentos que cumplen con la condición.

* Drop: Elimina una colección de MongoDB.

* Find: Permite buscar documentos en una colección de MongoDB. Si no se especifica un filtro, devuelve todos los documentos de la colección.

* Upsert: Es una opcion de parametro que indica si se debe insertar un documento si no existe o actualizarlo si existe.
    - Se utiliza en los métodos 'updateOne' y 'updateMany' comunmente.


------ Operadores ------

* La importancia de los operadores en MongoDB radica en la capacidad de realizar consultas más complejas y específicas. Utilizar el operador correcto en el momento adecuado puede mejorar el rendimiento de la base de datos.

* Operadores de Actualización:
    - $set: Actualiza o agrega un campo en un documento.
    - $unset: Elimina un campo de un documento.
    - $inc: Incrementa el valor de un campo en un documento.
    - $min: Actualiza el valor de un campo si el valor especificado es menor.
    - $max: Actualiza el valor de un campo si el valor especificado es mayor.
    - $mul: Multiplica el valor de un campo en un documento.
    - $rename: Renombra un campo en un documento.
    - $currentDate: Asigna la fecha actual a un campo en un documento.
    - $pop: Elimina el primer o último elemento de un array.
    - $pull: Elimina todos los elementos de un array que cumplan con una condición.
        - $in($pull): Elimina los elementos de un array que coinciden con los valores especificados.
    - $addToSet: Agrega un elemento a un array si no existe.
    - $push: Agrega un elemento a un array.
        + $each($addToSet, $push): Agrega varios elementos a un array.

* Operadores de Comparación:
    - $eq: Igual a.
    - $gt: Mayor que.
    - $gte: Mayor o igual
    - $in: Coincide con cualquier valor en un array.
    - $lt: Menor que.
    - $lte: Menor o igual.
    - $ne: No igual a.
    - $nin: No coincide con ningún valor en un array.

* Operadores Lógicos:
    - $and: Evalúa una expresión lógica y devuelve true si todas las expresiones son verdaderas.
    - $or: Evalúa una expresión lógica y devuelve true si alguna de las expresiones es verdadera.
    - $not: Invierte el valor de una expresión booleana.
    - $nor: Evalúa una expresión lógica y devuelve true si ninguna de las expresiones es verdadera.

* Operadores de Elemento:
    - $exists: Verifica si un campo existe en un documento.
    - $type: Verifica el tipo de un campo en un documento.

* Operadores de Expresión:
    - $expr: Permite utilizar expresiones de agregación en una consulta.
    - $jsonSchema: Valida un documento con un esquema JSON.

* Operadores de Array:
    - $all: Verifica si todos los elementos de un array cumplen con una condición.
    - $elemMatch: Verifica si al menos un elemento de un array cumple con una condición.
    - $size: Verifica el tamaño de un array.
    - $slice: Devuelve un subconjunto de elementos de un array.

* Operadores de Evaluación:
    - $expr: Permite utilizar expresiones de agregación en una consulta.
    - $mod: Selecciona los documentos donde el valor de un campo dividido por un divisor tiene un residuo específico.
    - $regex: Selecciona los documentos donde el valor de un campo coincide con una expresión regular especificada.
    - $text: Realiza una búsqueda de texto completo en un campo de tipo string.
    - $where: Permite ejecutar una función de JavaScript en la base de datos.

* Operadores Geoespaciales:
    - $geoIntersects: Selecciona los documentos cuyos campos geoespaciales se cruzan con un objeto geoespacial.
    - $geoWithin: Selecciona los documentos cuyos campos geoespaciales están completamente contenidos en un objeto geoespacial.
    - $near: Selecciona los documentos cuyos campos geoespaciales están cerca de un punto geoespacial.
    - $nearSphere: Selecciona los documentos cuyos campos geoespaciales están cerca de un punto geoespacial en una esfera.

------ Regex ------

* Regex: Es una secuencia de caracteres que define un patrón de búsqueda. Se utiliza para buscar y reemplazar texto en una cadena.

* Opciones:
    - i: Ignora mayúsculas y minúsculas.
    - m: Multilínea.
    - s: Punto coincide con cualquier carácter, incluidos los saltos de línea.
    - x: Ignora los espacios en blanco y permite comentarios.

* Metacaracteres:
    - ^: Inicio de la cadena.
    - $: Fin de la cadena.
    - .: Cualquier carácter.
    - *: Cero o más repeticiones.
    - +: Una o más repeticiones.
    - ?: Cero o una repetición.
    - (): Agrupar expresiones.
    - []: Lista de caracteres permitidos.
    - {}: Número específico de repeticiones.
    - |: Alternativa.
    - \: Caracter de escape.

------ Proyección ------

* Proyección: Permite seleccionar los campos que se desean mostrar en los resultados de una consulta.

* Es el equivalente a la cláusula SELECT en SQL. Se pasa como segundo argumento en el método 'find'.

* Los campos que esten en '1' se mostrarán, mientras que los campos que esten en '0' no se mostrarán. Los campos que no se especifiquen no se mostrarán por defecto.

* El campo '_id' se muestra por defecto, a menos que se especifique explícitamente con '0'.

* Sintaxis:
    - db.collection.find({}, {campo1: 1, campo2: 1, _id: 0})


------ $in vs $elemMatch (objetos) ------

* $in: Selecciona los documentos donde el valor de un campo coincide con al menos uno de los valores especificados en un array. Si tengo un arreglo de objetos, $in va a buscar los objetos que específicamente tengan la estrucutra y valores especificados.

* $elemMatch: Selecciona los documentos donde al menos un elemento de un array cumple con los criterios especificados. Si tengo un arreglo de objetos, $elemMatch va a buscar los objetos que cumplan con los criterios especificados, mas no que tengan la estructura exacta.

* Ejemplo:

{
  "_id": 1,
  "results": [
    { "product": "abc", "score": 10, "region": "US" },
    { "product": "xyz", "score": 5, "region": "EU" }
  ]
},

{
  "_id": 2,
  "results": [
    { "product": "abc", "score": 10, "region": "EU" },
    { "product": "xyz", "score": 5, "region": "US" }
  ]
}

* $in:
    - db.collection.find({results: { $in: [{product: "abc", score: 10}] }})
        - No devuelve nada, ya que no hay un objeto que cumpla con la estructura y valores especificados.

    - db.collection.find({results: { $in: [{product: "abc", score: 10, region: "US"}] }})
        - Devuelve el primer documento, ya que hay un objeto que cumple con la estructura y valores especificados.

* $elemMatch:
    - db.collection.find({results: { $elemMatch: {product: "abc", score: 10} }})
        - Devuelve el primer documento y el segundo, ya que cumplen con los criterios especificados.

    - db.collection.find({results: { $elemMatch: {product: "abc", score: 10, region: "US"} }})
        - Devuelve el primer documento, ya que cumple con los criterios especificados.