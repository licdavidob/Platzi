------ Recurso GitHub ------
https://github.com/platzi/curso-mongo-data

------ Conceptos Clave ------

* Los datos en MongoDB se almacenan en documentos legibles en formato JSON, con pares clave-valor. Sin embargo, para el almacenamiento interno y la escritura, MongoDB utiliza BSON, un formato binario que ofrece mayor rendimiento.

* Los documentos se almacenan en colecciones, que son similares a las tablas en una base de datos relacional. Las colecciones pueden contener cualquier número de documentos y no requieren un esquema fijo.

* Un diagrama ER permite modelar y visualizar nuestros datos y sus relaciones.

------ Metodología para Modelado ------

1. Requerimientos.
2. Diagrama ER.
3. Aplicar patrones de diseño.

* Cada una de estas fases se redea en diferentes aspectos.

1. Escenario: Como serán los escenarios del modelo de negocio. (Ej: Como un usuario usará la app, donde podra editar sus mensajes o como comprará un producto).

2. Expertos: Necesitamos expertos relacionados a nuestro tipo de negocio. (Ej: Si nos planeamos ofrecer un software orientado a la contabilidad, necesitamos a un experto, quien nos explique los conceptos que debemos manejar para su desarrollo.)

3. Sistema actual: Tener en cuenta como funciona su sistema actual. Analizar como llevan a cabo sus tareas de la forma actual. (Ej: Las empresas llevan una gestión de sus ventas en un excel)

4. DB Admin: El experto en modelado que une todas estas caracteristicas y llega a un resultado.

* Como resultado se obtiene:

1. Workload: Identificamos la carga de trabajo, operaciones importantes, tamaño de datos, consultas y posibles suposiciones.

2. Relaciones: Identifcamos las entidades, atributos, restricciones y relaciones.

3. Patrones: Cuando tenemos el diagrama de entidad-relación identificamos los patrones en el modelo de negocio que nos permiten realizar optimizaciónes de la carga de trabajo o obtener un mejor desempeño de la misma.

------ Workload ------

Permite identificar la carga de trabajo, operaciones importantes, tamaño de datos, consultas y posibles suposiciones.

Se construye considerando los Escenarios, Expertos y el Sistema Actual para identificar los elementos y su comportamiento, facilitando la toma de decisiones en el diseño de la base de datos. Para ello, se puede utilizar un documento que incluya las siguientes secciones:

1. Casos de uso: Descripción de los aspectos más importantes del caso de negocio.

2. Sección principal: Resalta los actores principales.

3. Suposiciones acerca del negocio: Declaraciones que pueden variar con el tiempo.

4. Operaciones: Detalle de los actores y su relación con la base de datos, incluyendo frecuencia, tipo de operación, etc.

5. Entidades: Creación de entidades del negocio basadas en la información de los expertos.

6. Observaciones finales: Acotaciones generales sobre la información recolectada.

------ Validación de campos ------

Para validar los campos de un documento en MongoDB, se puede utilizar el método createCollection() con un objeto de validación que incluya un esquema JSON con las propiedades y restricciones necesarias.

Todos los tipos de datos disponibles: https://www.mongodb.com/docs/manual/reference/bson-types/

Pattern: Permite validar un campo con una expresión regular.

    + Metacaracteres: Tienen un significado específico dentro de una expresión regular:
        - .: Cualquier carácter.
        - ^: Inicio de la cadena.
        - $: Fin de la cadena.
        - *: Cero o más repeticiones.
        - +: Una o más repeticiones.
        - ?: Cero o una repetición.
        - []: Lista de caracteres permitidos.
        - (): Agrupación de caracteres.
    
    + Clases de caracteres: Representan conjuntos predefinidos de caracteres. 
        - \d: Dígitos.
        - \w: Caracteres alfanuméricos.
        - \s: Espacios en blanco.
        - \D: No dígitos.
        - \W: No alfanuméricos.
        - \S: No espacios en blanco.
    
    + Validaciones comunes: 
        - Validar email: "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$"
        - Validar URL: "pattern": "^(http|https)://[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$"
        - Validar password: "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*d)(?=.*W).{8,}$"
            Donde:
                * (?=.*[a-z]): Al menos una letra minúscula.
                * (?=.*[A-Z]): Al menos una letra mayúscula.
                * (?=.*d): Al menos un dígito.
                * (?=.*W): Al menos un carácter especial.
                * .{8,}: Al menos 8 caracteres.


