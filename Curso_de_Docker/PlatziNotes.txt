---- Imagen Disponible ----
* ¿Qué es Docker?
    - Docker Daemon: Es un proceso que corre en el host y es el encargado de crear y manejar los contenedores.
    - Docker Client (CLI): Es la interfaz de línea de comandos que se comunica con el daemon.

* Arquitectura de Docker:
    - Contenedores: Son instancias de imágenes que se ejecutan en un ambiente aislado.
    - Imágenes: Son plantillas de solo lectura con instrucciones para crear un contenedor.
    - Network: Permite la comunicación entre contenedores.
    - Volumes: Permite persistir datos en el host.

* Contenedor:
    - Es una agrupación de procesos.
    - Es una entidad lógica creado a partir de una imágen.
    - Ejecuta procesos de forma nativa.
    - Los procesos que se ejecutan adentro de los contenedores ven su universo como el contenedor lo define.

* Command:
    - Es la instrucción que se ejecuta al iniciar un contenedor.

* Ciclo de vida de un contenedor:
    - Cada que se ejecuta un contenedor, en realidad se ejecuta un proceso del S.O. A este proceso se le conoce como 'Main Process'.
    - El 'Main Process' determina la vida del contenedor. Si el Main Process termina, el contenedor también termina.
    - El 'Sub Process' es un proceso que se ejecuta dentro del contenedor. Si algún sub process termina o falla, el contenedor sigue vivo.
    - Se puede matar un Main Process desde fuera del contenedor conociendo el PID del proceso que esta corriendo en nuestro host.
        1. docker inspect --format '{{.State.Pid}}' <container_id>
        2. kill -9 <pid>

* Bind Mounts:
    - Permite montar un directorio del host en un contenedor.
    - Un contenedor representa el universo de un proceso. Por lo que si el contenedor se elimina, toda su información se pierde.
    - Un Bind Mount no es que mas que atar un directorio del host a un directorio del contenedor.
    - Todo lo que haya en el contenido del directorio del contenedor se verá reflejado en el directorio del host y viceversa.

* Volumen:
    - Un Volumen es un directorio que se encuentra en el host y que es montado en un contenedor.
    - Un Volumen es persistente, es decir, si se elimina un contenedor, el volumen sigue existiendo.
    - Docker gestiona los volúmenes, desde mi dispositivo es dificil acceder a ellos.

--- Expose vs Publish ---

* Expose:
    - Es una instrucción que se coloca en el Dockerfile.
    - Indica el puerto que expone la imagen.
    - No mapea el puerto del contenedor al puerto del host.
    - Es una buena práctica para documentar el puerto que expone la imagen.

* Publish:
    - Es una instrucción que se coloca al crear un contenedor.
    - Mapea un puerto del contenedor al puerto del host.
    - Se hace con el parámetro -p al crear un contenedor.
    - Ejemplo: docker run -p 8080:80 nginx (Mapea el puerto 80 del contenedor al puerto 8080 del host).

Link de referencia: https://stackoverflow.com/questions/22111060/what-is-the-difference-between-expose-and-publish-in-docker/

--- Imagen Disponible ----
* Bind Mount vs Volumen:
    - Ambos permiten persistir datos.
    - Los Bind Mounts son más fáciles de acceder desde el host.
    - Los Volumenes son más seguros y fáciles de gestionar. Solo Docker tiene acceso a ellos.

* Insertar y extraer archivos de un contenedor:
    - Para insertar un archivo en un contenedor se puede hacer de dos formas:
        1. docker cp <archivo> <container_id>:<directorio>
        2. docker exec -it <container_id> bash
    - Para extraer un archivo de un contenedor se puede hacer de dos formas:
        1. docker cp <container_id>:<directorio> <archivo>
        2. docker exec -it <container_id> bash