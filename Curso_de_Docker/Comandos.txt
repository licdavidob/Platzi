* Comandos Docker:

    - docker images: Muestra las imagenes que tenemos en nuestro sistema.
        + Repository: Nombre de la imagen.
        + Tag: Versión de la imagen.
        + Image ID: Identificador de la imagen.
        + Created: Fecha de creación de la imagen.
        + Size: Tamaño de la imagen.

    - docker pull: Descarga una imagen de un repositorio.
        + Ejemplo: docker pull ubuntu (Descarga la ultima versión de ubuntu).
        + Ejemplo: docker pull ubuntu:18.04 (Descarga la versión 18.04 de ubuntu).
    
    - docker image rm <image_id>: Elimina una imagen de nuestro sistema.
        + Ejemplo: docker image rm 1234567890 (Elimina la imagen con el id 1234567890).

    - docker create [options] <image>: Crea un contenedor a partir de una imagen.
        + --name: Permite asignar un nombre al contenedor.
        + --network: Permite asignar un contenedor a una red.
        + -p: Permite mapear un puerto del contenedor al puerto del host.
        + -v: Permite mapear un volumen del contenedor al host.
        + -e: Permite asignar variables de entorno al contenedor.
        + -d: Permite ejecutar el contenedor en segundo plano.

        + Ejemplo: docker create --name my-container -p8080:80 my-image:1.0

    - docker ps [options]: Muestra los contenedores que se están ejecutando.
        + -a: Muestra todos los contenedores que se han creado.
        + -q: Muestra solo los ids de los contenedores.
        + -l: Muestra el último contenedor que se ha creado.

    - docker inspect <container_id>: Muestra información detallada de un contenedor.

    - docker rename <container_id> <new_name>: Permite renombrar un contenedor.
        + Ejemplo: docker rename 1234567890 new_name (Renombra el contenedor con el id 1234567890 a new_name).
    
    - docker start <container_id>: Inicia un contenedor.
        + Ejemplo: docker start 1234567890 (Inicia el contenedor con el id 1234567890).
    
    - docker stop <container_id>: Detiene un contenedor.
        + Ejemplo: docker stop 1234567890 (Detiene el contenedor con el id 1234567890).
    
    - docker rm [options] <container_id>: Elimina un contenedor.
        + -f: Permite forzar la eliminación de un contenedor.
        + Ejemplo: docker rm 1234567890 (Elimina el contenedor con el id 1234567890).

    - docker container prune: Elimina todos los contenedores que no se están ejecutando.

    - docker logs <container_id>: Muestra los logs de un contenedor.
        + -f: Muestra los logs en tiempo real.

    - docker run [options] <image>: Es la combinación de los comandos de 'docker pull' 'docker create' y 'docker start'.
        + -it: Modo interactivo. Permite ejecutar un contenedor en modo interactivo.
        + -p: Permite mapear un puerto del contenedor al puerto del host.
        + -v: Permite mapear un directorio del contenedor a un directorio del host.
            * Ejemplo: -v /path/host:/path/container
        + -e: Permite asignar variables de entorno al contenedor.
        + -d: Permite ejecutar el contenedor en segundo plano.
        + --name: Permite asignar un nombre al contenedor.
        + --network: Permite asignar un contenedor a una red.
        + --mount: Permite montar un volumen en el contenedor.
            * src=<host_path>,dst=<container_path>
            * Ejemplo: --mount src=dataPrueba,dst=/data
                - Donde:
                    + src: Es el directorio del host o nombre del volumen.
                    + dst: Es el directorio del contenedor que quiero se replique.
        + --memory: Permite asignar la cantidad de memoria que puede utilizar el contenedor.
        + --cpus: Permite asignar la cantidad de CPUs que puede utilizar el contenedor.

    - docker exec [options] <container_id> <command>: Permite ejecutar un comando en un contenedor que se está ejecutando.
        + -it: Modo interactivo.
        + Ejemplo: docker exec -it 1234567890 bash (Ejecuta el bash en el contenedor con el id 1234567890).

    - docker build [options] <path>: Construye una imagen a partir de un Dockerfile.
        + -t: Permite asignar un nombre y un tag a la imagen.
        + -f: Permite indicar el archivo Dockerfile.
        + Ejemplo: docker build -t my-image:1.0 -f mi.dockerfile

    - docker network create [options] <network_name>: Crea una red personalizada.
        + -ls: Muestra las redes que se han creado.
        + -d: Permite asignar un driver a la red.
        + -rm: Elimina una red.
        + --atachable: Permite que los contenedores se puedan conectar a la red.

    - docker network inspect <network_name>: Muestra información detallada de una red.

    - docker network connect <network_name> <container_id>: Permite conectar un contenedor a una red.
        + Ejemplo: docker network connect my-network 1234567890 (Conecta el contenedor con el id 1234567890 a la red my-network).

    - docker volume [options]: Permite crear y administrar volúmenes.
        + create: Crea un volumen.
        + ls: Muestra los volúmenes que se han creado.
        + rm: Elimina un volumen.

    - docker cp [options] <container_id>: Permite copiar archivos entre el host y el contenedor.
        + -a: Permite copiar directorios.
        + Ejemplo (Insertar): docker cp file.txt 1234567890:/path (Copia el archivo file.txt al contenedor con el id 1234567890).
        + Ejemplo (Extraer): docker cp 1234567890:/path/file.txt . (Copia el archivo file.txt del contenedor con el id 1234567890 al host).

    - docker compose [options]: Permite definir y ejecutar aplicaciones multi-contenedor.
        + up: Crea y ejecuta los contenedores.
        + down: Detiene y elimina los contenedores.
        + -f: Permite indicar el archivo docker-compose.yml.
        + -d: Permite ejecutar los contenedores en segundo plano.

    - docker tag <image_id> <repository>: Permite etiquetar una imagen.
        + Ejemplo: docker tag 1234567890 my-image:1.0.

    - docker history <image_id>: Muestra el historial de una imagen.

    - docker container prune: Elimina todos los contenedores que no se están ejecutando.

    - docker rm -f $(docker ps -a -q): Elimina todos los contenedores que se han creado, ejecutandose o no.

    - docker rmi $(docker images -q): Elimina todas las imágenes que se han descargado.

    - docker system prune: Elimina todos los contenedores, imágenes y volúmenes que no se están utilizando.

    - docker stats: Muestra el uso de recursos de los contenedores que se están ejecutando.