* Comandos Docker:

    - docker images: Muestra las imagenes que tenemos en nuestro sistema.
        + Repository: Nombre de la imagen.
        + Tag: Versión de la imagen.
        + Image ID: Identificador de la imagen.
        + Created: Fecha de creación de la imagen.
        + Size: Tamaño de la imagen.

    - docker pull: Descarga una imagen de un repositorio.
        + Ejemplo: docker pull ubuntu (Descarga la ultima versión de ubuntu).
        + Ejemplo: docker pull ubuntu:18.04 (Descarga la versión 18.04 de ubuntu).
    
    - docker image rm <image_id>: Elimina una imagen de nuestro sistema.
        + Ejemplo: docker image rm 1234567890 (Elimina la imagen con el id 1234567890).

    - docker create [options] <image>: Crea un contenedor a partir de una imagen.
        + --name: Permite asignar un nombre al contenedor.
        + --network: Permite asignar un contenedor a una red.
        + -p: Permite mapear un puerto del contenedor al puerto del host.
        + -v: Permite mapear un volumen del contenedor al host.
        + -e: Permite asignar variables de entorno al contenedor.
        + -d: Permite ejecutar el contenedor en segundo plano.

    - docker ps [options]: Muestra los contenedores que se están ejecutando.
        + -a: Muestra todos los contenedores que se han creado.
        + -q: Muestra solo los ids de los contenedores.
        + -l: Muestra el último contenedor que se ha creado.

    - docker inspect <container_id>: Muestra información detallada de un contenedor.

    - docker rename <container_id> <new_name>: Permite renombrar un contenedor.
        + Ejemplo: docker rename 1234567890 new_name (Renombra el contenedor con el id 1234567890 a new_name).
    
    - docker start <container_id>: Inicia un contenedor.
        + Ejemplo: docker start 1234567890 (Inicia el contenedor con el id 1234567890).
    
    - docker stop <container_id>: Detiene un contenedor.
        + Ejemplo: docker stop 1234567890 (Detiene el contenedor con el id 1234567890).
    
    - docker rm [options] <container_id>: Elimina un contenedor.
        + -f: Permite forzar la eliminación de un contenedor.
        + Ejemplo: docker rm 1234567890 (Elimina el contenedor con el id 1234567890).

    - docker container prune: Elimina todos los contenedores que no se están ejecutando.

    - docker logs <container_id>: Muestra los logs de un contenedor.
        + -f: Muestra los logs en tiempo real.

    - docker run [options] <image>: Es la combinación de los comandos de 'docker pull' 'docker create' y 'docker start'.
        + -it: Modo interactivo. Permite ejecutar un contenedor en modo interactivo.
        + -p: Permite mapear un puerto del contenedor al puerto del host.
        + -v: Permite mapear un volumen del contenedor al host.

    -docker exec [options] <container_id> <command>: Permite ejecutar un comando en un contenedor que se está ejecutando.
        + -it: Modo interactivo.
        + Ejemplo: docker exec -it 1234567890 bash (Ejecuta el bash en el contenedor con el id 1234567890).

    - docker build [options] <path>: Construye una imagen a partir de un Dockerfile.
        + -t: Permite asignar un nombre y un tag a la imagen.
        + Ejemplo: docker build -t my-image:1.0 .

    - docker network create [options] <network_name>: Crea una red personalizada.
        + -ls: Muestra las redes que se han creado.
        + -d: Permite asignar un driver a la red.
        + -rm: Elimina una red.

    - docker compose [options]: Permite definir y ejecutar aplicaciones multi-contenedor.
        + up: Crea y ejecuta los contenedores.
        + down: Detiene y elimina los contenedores.
        + -f: Permite indicar el archivo docker-compose.yml.
        + -d: Permite ejecutar los contenedores en segundo plano.