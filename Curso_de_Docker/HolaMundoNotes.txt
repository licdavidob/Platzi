* Contenedor Docker:
    - Es empaquetar nuestras apps y sus dependencias.

* Caracterisiticas de Docker:
    - Portable
    - Ligero
    - Escalable
    - Seguro

* Se almacenan en repositorios privados o públicos.
    - Públicos: Docker Hub.

* Que es una imagen en Docker:
    - Es un paquete que contiene una aplicación y todas sus dependencias.
    - Se pueden crear imágenes a partir de un archivo Dockerfile.
    - Una imagen puede estar construida a partir de otra imagen.
    - Generalemnte, todas las imagenes son capas de otras imagenes.
        + Se puede visualizar esto cuando descargas una imagen, todas las descargar que comienza a hacer, son una capa de la imagen base.
    - Si descargo una imagen, y luego descargo otra imagen que tiene la misma capa que la imagen anterior, no se vuelve a descargar la capa, ya que la capa ya esta descargada.

* Que es Docker Desktop:
    - Es una máquina virtual que corre sobre Linux.
    - Permite ejecutar contenedores.
    - Contiene Docker Engine, Docker CLI y Docker Compose.
    - Corre nativo sobre Windows gracias a WSL2.

* Port Mapping:
    - Permite mapear un puerto del contenedor docker a un puerto físico de mi pc.
    - Se hace con el parametro -p al crear el contenedor.
    - El primer puerto es el puerto del host, y el segundo puerto es el puerto del contenedor.
    - Ejemplo: docker create -p 8080:80 nginx (Crea un contenedor de nginx, mapeando el puerto 80 del contenedor al puerto 8080 del host).

* Dockerfile:
    - Es un archivo que contiene las instrucciones para construir nuestras imágenes y posteriormente nuestros contenedores.
    - Todas las imágenes que vayamos a crear se basan en una imagen base.
    - Se puede crear una imagen a partir de un Dockerfile con el comando 'docker build'.
    - Ejemplo de un Dockerfile:

        FROM node:18
        RUN mkdir -p /home/app
        COPY . /home/app
        EXPOSE 3000
        CMD ["node", "/home/app/index.js"]

    - FROM: Indica la imagen base.
    - RUN: Ejecuta un comando en la imagen.
    - COPY: Copia archivos de la máquina host a la imagen.
    - EXPOSE: Indica el puerto que expone la imagen.
    - CMD: Indica el comando que se ejecuta al iniciar un contenedor.

* Docker networking:
    - Permite que los contenedores se comuniquen entre sí.
    - Se pueden crear redes personalizadas.
    - Se pueden mapear puertos de un contenedor a otro.
    - La manera de comunicarse entre contenedores es a través de los nombres de los contenedores.
    - Ejemplo de creación de una red personalizada:

        docker network create --driver bridge my-network

    - Ejemplo de creación de un contenedor en una red personalizada:

        docker run -d --name my-container --network my-network my-image

* Docker Compose:
    - Permite definir y ejecutar aplicaciones multi-contenedor.
    - Se define en un archivo 'docker-compose.yml'.
    - Se ejecuta con el comando 'docker compose up'.
    - Ejecutar docker compose puede crear:
        + Imagenes en caso de haber especificado un Dockerfile mediante el build.
        + Contenedores segun los servicios que se hayan definido.
        + Red Personalizada: Por defecto se crea una red personalizada para los contenedores que se crean con docker compose.
    
    - Los pasos para crear y ejecutar nuestros contenedores SIN Docker Compose son:
        + Descargar las imágenes.
        + Crear una red personalizada.
        + Crear los contenedores.
            * Mapear los puertos.
            * Asignar nombre a los contenedores.
            * Asignar los contenedores a la red personalizada.
            * Asignar variables de entorno.
            * Indicar la imagen a utilizar.

    - Los pasos para crear y ejecutar nuestros contenedores CON Docker Compose son:
        + Crear un archivo 'docker-compose.yml'.
        + Definir los servicios.
        + Ejecutar el comando 'docker-compose up'.

    - NOTA: En un docker compose, las tabulaciones son importantes.

    - Ejemplo de un archivo 'docker-compose.yml':
    
            version: "3.9"
            services:
                chanchito:
                    build: .
                    ports:
                        - "3000:3000"
                    links:
                        - monguito
                monguito:
                    image: mongo
                    ports:
                        - "27017:27017"
                    environment:
                        - MONGO_INITDB_ROOT_USERNAME=nico
                        - MONGO_INITDB_ROOT_PASSWORD=password
                    volumes:
                        - mongo-data:/data/db
                        # mysql -> /var/lib/mysql
                        # postgres -> /var/lib/postgresql/data
            volumes:
                mongo-data:
        
    - Donde:
        + version: Indica la versión de Docker Compose.
        + services: Indica los servicios que vamos a crear. Son los nombres de los contenedores.
        + build: Indica la ruta donde se encuentra el Dockerfile.
        + image: Indica la imagen que se va a utilizar.
        + ports: Indica los puertos que se van a mapear.
        + links: Indica los contenedores con los que se va a comunicar.
        + environment: Indica las variables de entorno.
        + volumes: Indica los volúmenes que se van a mapear.